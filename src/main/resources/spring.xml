<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.1.xsd
	 		http://www.springframework.org/schema/aop
	 		http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<!--自动扫描含有@Service将其注入为bean -->
	<context:component-scan base-package="com.roy.demo.service" />
	<context:component-scan base-package="com.roy.demo.redis" />

	<!-- 读取 env文件夹下的property -Dactive.profile="dev" -->
	<context:property-placeholder
		location="classpath:env/profile-${active.profile}.properties"
		ignore-unresolvable="true" />

	<!-- for commons-configuration start -->
	<bean name="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties" ref="commonsConfigurationFactoryBean" />
	</bean>

	<!-- -->
	<bean name="commonsConfigurationFactoryBean"
		class="org.springmodules.commons.configuration.CommonsConfigurationFactoryBean">
		<constructor-arg ref="databaseConfiguration" />
	</bean>

	<bean name="databaseConfiguration"
		class="org.apache.commons.configuration.DatabaseConfiguration">
		<constructor-arg name="datasource" ref="dataSource" />
		<constructor-arg name="table" value="param_info" />
		<constructor-arg name="keyColumn" value="name" />
		<constructor-arg name="valueColumn" value="url" />
	</bean>
	<!-- for commons-configuration ends -->

	<!-- -->
	<bean id="serviceConfig" class="com.roy.demo.config.ServiceConfig"
		p:logServiceUrl="${uer.service.url}" p:userServiceUrl="${court.service.url}" />

	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="protocol" value="smtp" />
		<property name="host" value="smtp.163.com" />
		<property name="port" value="25" />
		<property name="username" value="roy_yiyi" />
		<property name="password" value="179091PeTeR" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">false</prop>
				<!-- 如果是网易邮箱， mail.smtp.starttls.enable 设置为 false <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop> -->
			</props>
		</property>
	</bean>

	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
	</bean>

	<!-- 配置JedisPoolConfig实例 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="300" />
		<property name="maxTotal" value="600" />
		<property name="maxWaitMillis" value="1000" />
		<property name="testOnBorrow" value="true" />
	</bean>

	<!-- 配置JedisConnectionFactory -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="web02dev.asiainspection.com" />
		<property name="port" value="6379" />
		<property name="password" value="4zpKbZaHcRRjNBhr" />
		<property name="database" value="0" />
		<property name="usePool" value="true" />
		<property name="poolConfig" ref="poolConfig" />
	</bean>

	<bean id="stringRedisSerializer"
		class="org.springframework.data.redis.serializer.StringRedisSerializer" />

	<!-- 配置RedisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory" p:keySerializer-ref="stringRedisSerializer"
		p:hashKeySerializer-ref="stringRedisSerializer" />

	<!--<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" 
		p:connection-factory-ref="jedisConnectionFactory" /> -->

	<!-- 配置RedisCacheManager -->
	<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg name="redisOperations" ref="redisTemplate" />
		<property name="defaultExpiration" value="60" />
	</bean>

	<!-- 配置RedisCacheConfig -->
	<bean id="redisCacheConfig" class="com.roy.demo.redis.RedisCacheConfig">
		<constructor-arg ref="jedisConnectionFactory" />
		<constructor-arg ref="redisTemplate" />
		<constructor-arg ref="redisCacheManager" />
	</bean>

</beans>